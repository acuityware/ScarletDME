28Feb20, 29Feb20 -gwb
---------------------
ScarletDME now builds as a 64 bit application without error and will properly
start.  I'm currently chasing down compiler warnings that point out issues that
keep the db from operating fully.  

Converting to architecture independent variable types is only half the battle.
Any instances of things like LONG_MAX also have to be changed to their 
architecture independant equivalents like INT32_MAX.

Note that as of right now, the code will compile completely for the most part, 
but you will NOT have a fully functional system.

Issues I've hit:
The QMBasic compiler throwing errors on things that are most certainly NOT 
errors ("Duplicate label" - there's no labels in the test program!

QMBasic compiler throwing a "Numeric overflow" error during the compile of 
the test program.  The error is being thrown in the k_get_int() function in 
k_funcs.c.  It's happening in the "FLOATNUM" case where the absolute value of 
p->data.float_number is being checked to see if it's greater than INT32_MAX.
The problem is that data.float_number is some how being assigned to what
amounts to UINT32_MAX, so the test fails and an error is generated.
This test originally compared to LONG_MAX, but LONG_MAX becomes a 64 bit value
when you compile as a 64 bit application.

Disk accesses via reads will eventually cause a group lock that is never
unlocked.  The session will hang.  If you run "qm -dump", the bottom section
shows group locks:

=== GROUP LOCK TABLE ===
Max locks = 30, Count = 1474, Wait = 1, Retry = 57154, Scan = 1.0
GLid  Ct Hash User Fno Tp Group    GrpCt
  1  69   0   1   1 GR 00000001     0

The Retry field will continue to increase until you finally kill the process.
I had originally thought this issue was related to the LONG_MAX vs INT32_MAX
problem, but the eventual group lock hang continues to happen.  Prior to
the LONG_MAX change it would happen fairly quickly into the session.  After 
the group lock hang may happen early into the session or some minutes into it.
It took me quite a while to get it to hang so I could provide the above output
example.

I had to turn off the -Wformat warning in the build due to the compiler warnings
that were being thrown due to the conversion to int??_t & u_int??_t types.
These only appear in various sprintf(), printf(), fprintf(), and snprintf()
calls.  I have not done the research required to know wether or not these
warnings can continue to be ignored.

When building as a 64 bit application (comment out "-m32" in the makefile) you
will see some pointer cast warnings.  They're not triggered in the 32 bit build
and my C-fu isn't quite up to properly resolving them yet.

There is also an issue regarding terminal emulation - with my CentOS 8 system,
I can start ScarletDME and enter "TERM LINUX" and it sets up properly.
However, on My Raspberry Pi 3 (Current Raspbian) and my CentOS 7 system,
"TERM LINUX" results in "Unrecognized terminal name".  Not sure why yet, but 
it's something you should be aware of.

===============================================================================
27Feb20 - gwb
-------------
Did a bit of "rebranding" work.  A few instances of "QM" have been changed to
"ScarletDME" in the program source code.
Messages 1758, 3516, 5009, 5163, 6090, PL1758, PL3516, PL5009, PL5163, and
PL6090 were edited to change "QM" to "ScarletDME".

Notes added for Raspberry Pi users.
===============================================================================

26Feb20 - gwb
-------------
Eight. Years. Later....

The entire codebase was sifted through and all compiler warnings have been resolved.
The vast majority of the warnings were related to potential overflow problems
with sprintf() calls.  All the problematic calls were converted to snprintf() calls
and some minor error handling logic was added.  The error handling needs more work
to be actually beneficial.  (a grep for "TODO" will find most of these)

The remainder of the compiler warnings were triggered by variables that were declared
and set, but were never used after that point.  This items are marked by comments
and should be reviewed to see if they're part of functionality that was partially
removed (and mayhap could be restored) or just dead code that could safely be
ignored.

ScarletDME is currently building and working without error on CentOS 8.
See README.md for details on how to configure the build environment.

Some (not all!) K&R style function declarations have been converted to ANSI style.
Each source file that was edited has been reformatted for readiblity.  See the main
README.md file on guidelines for that.

A bug was found in op_config.c that would have prevented the successful parsing of the
"SH" and "SH1" configuration options.  See op_config.c for more info.

===============================================================================

20Jun12 - gwb
-------------
Fixed a compiler warning in k_error() - caused by an sprintf() call missing a format specifier.
Added link flags to the Makefile in order to support proper linking under Ubuntu 12.04 LTS
Added install and datafiles targets to the Makefile.
The install target will copy the results of the build action to $(INSTROOT)/bin which is currently
/usr/qmsys/bin.
The datafiles target will copy the system data files to $(INSTROOT) and set permissions on the required
files.  THIS WILL WIPE OUT AN EXISTING INSTALLATION!	

===============================================================================

07Aug09 - dat
-------------
Rewrote messages.c : sysmesg() to utilise a directory file version of MESSAGES instead of
a Dynamic file version. Fairly substantial changes in code, but the logic was
duplicated.
Also, obviously, changed MESSAGES into a directory file.

===============================================================================

06Aug09 - dat
-------------
Changes MESSAGES 1407 from:
  Error %d (o/s %d) writing record
to
  Error %d (o/s %d) writing record (Possible full disk?)
To provide a useful hint in the event the disk fills up.

===============================================================================

23Apr09 - gcb
-------------
Rewrote the DICT.TOOLS.CLS to cache dictionary and item data for efficiency.
Added a non-sort dictionary list get method and renamed the sorted list method.
Renamed the filename method to set.file.name and itemid to set.item.id.

===============================================================================

22Apr09 - gcb
-------------
Added GPL.BP DICT.TOOLS.CLS QMOO class for reading data from a file using dictionaries. There are also methods for getting the dict list, dict count, item-sselect, and item-sselect count. This is preliminary code and needs more work to be more stable and fully featured.

===============================================================================

14Apr09 - gcb
-------------
Added missing @FILENAME synonym for @FILE.NAME to ICOMP and BCOMP.

Added code to _SUM and _SUMALL to summarize only numeric values in the array being passed to the function.

===============================================================================

13Apr09 - gwb
Added TEST account to the workdevbranch1 tree.  This account should be the
home of any test programs or procs that excercise new features.

You can add the TEST account by logging to QMSYS and creating a new entry
in the ACCOUNTS file called "TEST".  Line #1 should look like this:

/<your pathname>/openqm/branches/workdevbranch1/TEST

File it and then run UPDATE.ACCOUNT.  You should then be able to log to the
TEST account without any problems.

===============================================================================

10Apr09 - gcb
-------------
Added SKT$INFO.FAMILY option for SOCKET.INFO to retrieve address family for INET type sockets. 
Return values are SKT$INFO.FAMILY.IPV4 or SKT$INFO.FAMILY.IPV6. 

Added socket option to op_srvrskt() in op_skt.c to enable SO_REUSEADDR. This will allow 
rebinding to address/ports in TIME_WAIT state.

================================================================================

10Apr09 - gwb
-------------
A segfault generating bug was triggered when calling OPEN.SOCKET or
CREATE.SERVER.SOCKET with a malformed ip address.  The routine was correctly
handling the error, but the error check didn't encapsulate to the freeaddrinfo()
call which was attempting to free a null pointer.  (getaddrinfo() failed
properly and never filled out the struct that freeaddrinfo() was trying to
free.

As a result of this, the bug was quashed (thanks for finding it Glen!) and I
greatly increased the ability of the code to detect malformed ip address of
either IPv4 or IPv6.

A new error constant was added (ER_BADADDR), so you should re-run ERRGEN to
update the QMBasic error codes file.

================================================================================
09Apr09 - gwb
-------------
In op_skt.c the routines op_openskt(), op_acceptskt(), op_srvrsck()
and op_srvraddr() have been re-written to incorporate newer network
access methodologies.  This includes the ability to transparently
access both IPv4 and IPv6 network features.

In order to keep error constants that live in SYSCOM up to date, 
you'll need to run "ERRGEN" from GPL.BP to pick up the changes
made to err.h in the C source tree.

ERRGEN has also been updated to incorporate changes that actually
allow it to do it's job.  The original GPL source drop included a 
version of ERRGEN that wasn't updated to work with the new GPL.BP
source tree.  This has been fixed.

You'll need to create a pointer called "CSRC" in order to allow
ERRGEN to access the err.h file that's included in the gplsrc directory.
The VOC entry looks like this:

F
/path/to/your/source/tree

=============================================================================

